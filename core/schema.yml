openapi: 3.0.3
info:
  title: ' API Documentation with Swagger UI for Ecommerce'
  version: 1.0.0
  description: Your project description
paths:
  /api/auth/check-email/:
    post:
      operationId: auth_check_email_create
      description: |-
        Chech Email View
        Args:
            ``email`` (string).
        Returns:
            is_valid: Boolen (True or False)
            - if True mean it the Email is unuseable by any user
            - else mean it the Email is alredy exsits.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChechEmailValidateSerilzers'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChechEmailValidateSerilzers'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChechEmailValidateSerilzers'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChechEmailValidateSerilzers'
          description: ''
  /api/auth/login/:
    post:
      operationId: auth_login_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthToken'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthToken'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
          description: ''
  /api/auth/send-verify-email/:
    post:
      operationId: auth_send_verify_email_create
      description: |-
        Args:
            GenericAPIView (_type_): _description_

        Returns:
            _type_: _description_
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Verify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Verify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Verify'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Verify'
          description: ''
  /api/auth/sginup/:
    post:
      operationId: auth_sginup_create
      description: |-
        Reigster User View to signup after verify the ``email`` or ``phone number`` (just email for new).
        Returns:
        - in_Success:
            - data: (``string``) -> message from server.
            - user: (``User``) -> data of user after created.
            - status_code : 200
        - in_Fail:
            - error: (``string``) -> Error Message.
            - status: 401 when come bafore verify the ``email`` or ``phone_number``.
            - status: 400 when data isn't correct or somthing go to by wrong.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAuth'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAuth'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAuth'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAuth'
          description: ''
  /api/auth/verify-email/:
    post:
      operationId: auth_verify_email_create
      description: |-
        Verify the Email end Check the code that will be sand if from ``Send Verify Email``.
        if you try to sign up before send the code to here it will make error ``with status code 401``.

        Args:
        - code(intager): a given code from email.
        ``- example: {'code': 0000}``.

        Returns:
        - is_valid:Boolen.
        - in_Success:
            - status: 200 .
        - in_Fail:
            - status: 401 when the given code not match with the sending code.
            - status: 400 when data isn't correct or somthing go to by wrong.
      tags:
      - auth
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/product/:
    get:
      operationId: product_list
      description: |-
        _summary_

        Args:
            ListAPIView (_type_): _description_

        Returns:
            _type_: _description_
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - product
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductList'
          description: ''
  /api/product/{id}/:
    get:
      operationId: product_retrieve
      description: |-
        _summary_

        Args:
            ListAPIView (_type_): _description_

        Returns:
            _type_: _description_
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - product
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleProduct'
          description: ''
  /api/product/create/:
    post:
      operationId: product_create_create
      description: |-
        _summary_

        Args:
            ListAPIView (_type_): _description_

        Returns:
            _type_: _description_
      tags:
      - product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Diaa'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Diaa'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Diaa'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Diaa'
          description: ''
  /api/product/store/{store_id}/:
    get:
      operationId: product_store_retrieve
      description: |-
        _summary_

        Args:
            ListAPIView (_type_): _description_

        Returns:
            _type_: _description_
      parameters:
      - in: path
        name: store_id
        schema:
          type: integer
        required: true
      tags:
      - product
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/product/sub-category/{id}/:
    get:
      operationId: product_sub_category_list
      description: |-
        _summary_

        Args:
            ListAPIView (_type_): _description_
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - product
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductList'
          description: ''
  /api/schema/:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - schema
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
components:
  schemas:
    AuthToken:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        token:
          type: string
          readOnly: true
      required:
      - password
      - token
      - username
    ChechEmailValidateSerilzers:
      type: object
      description: |-
        Serializer for Chack if The Email is used by another user or not

        Args:
            email (``Email``): take email from request
      properties:
        email:
          type: string
          format: email
      required:
      - email
    Diaa:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        slug:
          type: string
          readOnly: true
          title: URL id
          pattern: ^[-a-zA-Z0-9_]+$
        product_name:
          type: string
          maxLength: 50
        product_image:
          type: string
          format: uri
          nullable: true
        product_description:
          type: string
        category:
          type: integer
        brand:
          type: integer
          nullable: true
      required:
      - category
      - id
      - slug
    Image:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        image:
          type: string
          format: uri
      required:
      - id
      - image
    PaginatedProductList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    Product:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        product_item:
          type: array
          items:
            $ref: '#/components/schemas/ProductItem'
          readOnly: true
        category:
          type: string
          readOnly: true
        brand:
          type: string
          readOnly: true
        slug:
          type: string
          readOnly: true
          title: URL id
          pattern: ^[-a-zA-Z0-9_]+$
        product_name:
          type: string
          maxLength: 50
        product_image:
          type: string
          format: uri
          nullable: true
        product_description:
          type: string
      required:
      - brand
      - category
      - id
      - product_item
      - slug
    ProductItem:
      type: object
      description: |-
        _summary_

        Args:
            serializers (_type_): _description_

        Returns:
            _type_: _description_
      properties:
        id:
          type: integer
          readOnly: true
        item_image:
          type: array
          items:
            $ref: '#/components/schemas/Image'
          readOnly: true
        rating:
          type: number
          format: double
          readOnly: true
        in_favorite:
          type: boolean
          readOnly: true
        stock:
          type: number
          format: double
          readOnly: true
        price:
          type: number
          format: double
        slug:
          type: string
          nullable: true
          title: URL ID
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        sku:
          type: string
          format: uri
          nullable: true
        product:
          type: integer
      required:
      - id
      - in_favorite
      - item_image
      - price
      - product
      - rating
      - stock
    SingleProduct:
      type: object
      description: |-
        SingleProductSerializer for main Product and has Products item

        Args:
            serializers (_type_): _description_

        Returns:
            _type_: _description_
      properties:
        id:
          type: integer
          readOnly: true
        product_item:
          type: array
          items:
            $ref: '#/components/schemas/SingleProductItem'
          readOnly: true
        category:
          type: object
          additionalProperties: {}
          readOnly: true
        brand:
          type: string
          readOnly: true
        product_image:
          type: string
          format: uri
        slug:
          type: string
          readOnly: true
          title: URL id
          pattern: ^[-a-zA-Z0-9_]+$
        product_name:
          type: string
          maxLength: 50
        product_description:
          type: string
      required:
      - brand
      - category
      - id
      - product_image
      - product_item
      - slug
    SingleProductItem:
      type: object
      description: |-
        Class Serializers for Single Products_item to get more datils


        Args:
            serializers (_type_): _description_

        Returns:
            _type_: _description_
      properties:
        id:
          type: integer
          readOnly: true
        in_favorite:
          type: boolean
          readOnly: true
        rating:
          type: number
          format: double
          readOnly: true
        stock:
          type: integer
        item_image:
          type: array
          items:
            $ref: '#/components/schemas/Image'
          readOnly: true
        price:
          type: number
          format: double
        sku:
          type: string
          format: uri
          nullable: true
        slug:
          type: string
          nullable: true
          title: URL ID
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
      required:
      - id
      - in_favorite
      - item_image
      - price
      - rating
      - stock
    UserAuth:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        phone_number:
          type: string
          nullable: true
          maxLength: 50
        username:
          type: string
          nullable: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          maxLength: 150
        password:
          type: string
          writeOnly: true
        name:
          type: string
          title: Full name
          maxLength: 60
        image:
          type: string
          format: uri
          nullable: true
        user_auth:
          type: object
          additionalProperties: {}
          readOnly: true
      required:
      - email
      - id
      - password
      - user_auth
    Verify:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
